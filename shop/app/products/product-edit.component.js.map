{"version":3,"file":"product-edit.component.js","sourceRoot":"","sources":["file:///D:/dev/shop/tmp/broccoli_type_script_compiler-input_base_path-77EpFaED.tmp/0/src/app/products/product-edit.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators, REACTIVE_FORM_DIRECTIVES, FormControl} from '@angular/forms';\r\nimport {ProductService, ProductModel} from './product.service';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  // selector: 'product-edit',\r\n  templateUrl: 'product-edit.component.html',\r\n  directives: [REACTIVE_FORM_DIRECTIVES]\r\n})\r\nexport class ProductEditComponent implements OnInit {\r\n\r\n  private frmProduct: FormGroup;\r\n  private productToEdit: ProductModel;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    console.log('this.route.params', this.route.params);\r\n    this.prepareForm();\r\n    this.route.params.subscribe(params => {\r\n        const id = +params['id'];\r\n        // This means EDIT mode\r\n        if (id) {\r\n          this.productService.get(id)\r\n            .then((product: ProductModel) => { \r\n                this.productToEdit = product;\r\n                (<FormControl>this.frmProduct.controls['name']).updateValue(product.name);\r\n                (<FormControl>this.frmProduct.controls['price']).updateValue(product.price);\r\n            });\r\n        }\r\n      });\r\n  }\r\n  \r\n  save() {\r\n\r\n    if (this.productToEdit) {\r\n      // updating a monster\r\n      this.productService.save(this.frmProduct.value, this.productToEdit.id)\r\n      .then(()=>{\r\n          this.router.navigate(['/admin']);\r\n      });\r\n    } else {\r\n      // a new monster\r\n      console.log('Product Created', this.frmProduct.value);\r\n      this.productService.save(this.frmProduct.value)\r\n        .then((product : ProductModel)=>{\r\n          this.router.navigate(['/admin']);\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  prepareForm() {\r\n     this.frmProduct = this.formBuilder.group({\r\n      name: ['',\r\n              Validators.compose([Validators.required,\r\n                                  Validators.minLength(3),\r\n                                  Validators.maxLength(100)])],\r\n      price: [0, Validators.required]\r\n    });\r\n  }\r\n\r\n}\r\n"]}