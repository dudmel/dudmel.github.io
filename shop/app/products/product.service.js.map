{"version":3,"file":"product.service.js","sourceRoot":"","sources":["file:///D:/dev/shop/tmp/broccoli_type_script_compiler-input_base_path-77EpFaED.tmp/0/src/app/products/product.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\n \r\nexport class ProductModel {\r\n  private static nextId = 1;\r\n  private _id: number;\r\n\r\n  constructor(public name: string, public price: number, id?: number) {\r\n    if (id) this._id = id;\r\n    // TODO: not really needed as ID is always provided by server\r\n    else this._id = ProductModel.nextId++;\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  getImgUrl() {\r\n    return `app/shared/img/product/${this.name}.jpg`;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n\r\n  private baseUrl = 'http://mrjson.com/data/5787328efd12d79c2ab2dddc/product/';\r\n  constructor(private http: Http) {}\r\n\r\n  query() {\r\n\r\n    let prmProducts = this.http.get(this.baseUrl + 'list.json')\r\n      .toPromise()\r\n      .then(res => {\r\n        const jsonProducts = res.json();\r\n        return jsonProducts.map(jsonProduct =>\r\n          new ProductModel(jsonProduct.name, jsonProduct.price, jsonProduct.id))\r\n      });\r\n\r\n    prmProducts.catch(err => {\r\n      console.log('Problem talking to server');\r\n    });\r\n\r\n    return prmProducts;\r\n  }\r\n\r\n  get(id: number) {\r\n    let prmProduct = this.http.get(this.baseUrl + id + '.json')\r\n      .toPromise()\r\n      .then(res => {\r\n        const jsonProduct = res.json();\r\n        return new ProductModel(jsonProduct.name, jsonProduct.price, jsonProduct.id);\r\n      });\r\n\r\n    prmProduct.catch(err => {\r\n      console.log('Problem talking to server');\r\n    });\r\n    return prmProduct;\r\n\r\n  }\r\n\r\n  remove(id: number) {\r\n    let prmProduct = this.http.delete(this.baseUrl + id + '.json')\r\n      .toPromise()\r\n      .then(res => {\r\n        return this.query();\r\n      });\r\n\r\n    prmProduct.catch(err => {\r\n      console.log('Problem talking to server', err);\r\n    });\r\n    return prmProduct;\r\n  }\r\n\r\n  save(productData: any, id?: number) {\r\n\r\n    let response : any;\r\n    let prmProduct;\r\n\r\n    if (id) {\r\n      const url = this.baseUrl + id + '.json'\r\n      response = this.http.put(url, productData)\r\n    } else {\r\n       const url = this.baseUrl + 'item.json';\r\n       response = this.http.post(url, productData)\r\n    }\r\n\r\n    prmProduct = response.toPromise()\r\n      .then(res => {\r\n          const jsonProduct = res.json();\r\n          return new ProductModel(jsonProduct.name, jsonProduct.price, jsonProduct.id);\r\n      });\r\n\r\n    prmProduct.catch(err => {\r\n      console.log('Problem talking to server', err);\r\n    });\r\n    return prmProduct;\r\n  }\r\n}\r\n"]}